#!/usr/bin/env node
var logger = require('loge');
var PDF = require('../').PDF;

var yargs = require('yargs')
  .usage('Usage: $0 -f ScienceArticle.pdf [-o 1:0]')
  .describe({
    filename: 'pdf file to open',
    object: 'object(s) to dump',
    trailer: 'dump trailer',
    xref: 'dump cross references',
    pages: 'dump pages',
    help: 'print this help message',
    verbose: 'print extra output',
  })
  .alias({
    verbose: 'v',
    filename: 'f',
    object: 'o',
  })
  .demand(['filename'])
  .boolean(['help', 'verbose', 'trailer', 'xref', 'pages']);

var argv = yargs.argv;
logger.level = argv.verbose ? 'debug' : 'info';

function main() {
  var pdf = PDF.open(argv.filename);
  if (argv.trailer) {
    console.log('trailer: %j', pdf.trailer);
  }
  if (argv.xref) {
    console.log('cross_references: %j', pdf.cross_references);
  }

  if (argv.pages) {
    // iterate through the page objects
    pdf.pages.forEach(function(page, i, pages) {
      console.log('Page %d of %d', i, pages.length);
      // page.Contents is a list of IndirectReference instances, or maybe just one
      var contents = [].concat(page.Contents);
      for (var j = 0, content; (content = contents[j]); j++) {
        var content_object = pdf.resolveObject(content);
        console.log('Contents[%d]: %j', j, content_object);
      }
    });
  }

  if (argv.object) {
    var reference_arguments = [].concat(argv.object);
    reference_arguments.forEach(function(reference_argument) {
      var object_parts = reference_argument.split(':');
      var reference = {
        object_number: parseInt(object_parts[0], 10),
        generation_number: parseInt(object_parts[1] || '0', 10),
      };
      var object = pdf.findObject(reference);
      console.log('%d:%d => %j', reference.object_number, reference.generation_number, object);
    });
  }
}

if (argv.help) {
  yargs.showHelp();
}
else if (argv.version) {
  console.log(require('../package').version);
}
else { // if (require.main == module)
  main();
}
